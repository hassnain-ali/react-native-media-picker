///
/// MultipleImagePicker-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `CameraDevice` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { enum class CameraDevice; }
// Forward declaration of `CameraResult` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct CameraResult; }
// Forward declaration of `CropRatio` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct CropRatio; }
// Forward declaration of `CropResult` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct CropResult; }
// Forward declaration of `HybridMultipleImagePickerSpec` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { class HybridMultipleImagePickerSpec; }
// Forward declaration of `MediaPreview` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct MediaPreview; }
// Forward declaration of `PickerCameraConfig` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct PickerCameraConfig; }
// Forward declaration of `PickerCropConfig` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct PickerCropConfig; }
// Forward declaration of `PickerResult` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct PickerResult; }
// Forward declaration of `ResultType` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { enum class ResultType; }
// Forward declaration of `Text` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { struct Text; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridMultipleImagePickerSpec_cxx` to properly resolve imports.
namespace MultipleImagePicker { class HybridMultipleImagePickerSpec_cxx; }

// Include C++ defined types
#include "CameraDevice.hpp"
#include "CameraResult.hpp"
#include "CropRatio.hpp"
#include "CropResult.hpp"
#include "HybridMultipleImagePickerSpec.hpp"
#include "MediaPreview.hpp"
#include "PickerCameraConfig.hpp"
#include "PickerCropConfig.hpp"
#include "PickerResult.hpp"
#include "ResultType.hpp"
#include "Text.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::multipleimagepicker::bridge::swift {

  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::vector<PickerResult>
  /**
   * Specialized version of `std::vector<PickerResult>`.
   */
  using std__vector_PickerResult_ = std::vector<PickerResult>;
  inline std::vector<PickerResult> create_std__vector_PickerResult_(size_t size) {
    std::vector<PickerResult> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::vector<CropRatio>
  /**
   * Specialized version of `std::vector<CropRatio>`.
   */
  using std__vector_CropRatio_ = std::vector<CropRatio>;
  inline std::vector<CropRatio> create_std__vector_CropRatio_(size_t size) {
    std::vector<CropRatio> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<CropRatio>
  /**
   * Specialized version of `std::optional<CropRatio>`.
   */
  using std__optional_CropRatio_ = std::optional<CropRatio>;
  inline std::optional<CropRatio> create_std__optional_CropRatio_(const CropRatio& value) {
    return std::optional<CropRatio>(value);
  }
  
  // pragma MARK: std::optional<PickerCropConfig>
  /**
   * Specialized version of `std::optional<PickerCropConfig>`.
   */
  using std__optional_PickerCropConfig_ = std::optional<PickerCropConfig>;
  inline std::optional<PickerCropConfig> create_std__optional_PickerCropConfig_(const PickerCropConfig& value) {
    return std::optional<PickerCropConfig>(value);
  }
  
  // pragma MARK: std::optional<Text>
  /**
   * Specialized version of `std::optional<Text>`.
   */
  using std__optional_Text_ = std::optional<Text>;
  inline std::optional<Text> create_std__optional_Text_(const Text& value) {
    return std::optional<Text>(value);
  }
  
  // pragma MARK: std::optional<CameraDevice>
  /**
   * Specialized version of `std::optional<CameraDevice>`.
   */
  using std__optional_CameraDevice_ = std::optional<CameraDevice>;
  inline std::optional<CameraDevice> create_std__optional_CameraDevice_(const CameraDevice& value) {
    return std::optional<CameraDevice>(value);
  }
  
  // pragma MARK: std::optional<PickerCameraConfig>
  /**
   * Specialized version of `std::optional<PickerCameraConfig>`.
   */
  using std__optional_PickerCameraConfig_ = std::optional<PickerCameraConfig>;
  inline std::optional<PickerCameraConfig> create_std__optional_PickerCameraConfig_(const PickerCameraConfig& value) {
    return std::optional<PickerCameraConfig>(value);
  }
  
  // pragma MARK: std::function<void(const std::vector<PickerResult>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<PickerResult>&)>`.
   */
  using Func_void_std__vector_PickerResult_ = std::function<void(const std::vector<PickerResult>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<PickerResult>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_PickerResult__Wrapper final {
  public:
    explicit Func_void_std__vector_PickerResult__Wrapper(std::function<void(const std::vector<PickerResult>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::vector<PickerResult>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<PickerResult> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::vector<PickerResult>& /* result */)>> _function;
  };
  Func_void_std__vector_PickerResult_ create_Func_void_std__vector_PickerResult_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_PickerResult__Wrapper wrap_Func_void_std__vector_PickerResult_(Func_void_std__vector_PickerResult_ value) {
    return Func_void_std__vector_PickerResult__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(double /* reject */)>
  /**
   * Specialized version of `std::function<void(double)>`.
   */
  using Func_void_double = std::function<void(double /* reject */)>;
  /**
   * Wrapper class for a `std::function<void(double / * reject * /)>`, this can be used from Swift.
   */
  class Func_void_double_Wrapper final {
  public:
    explicit Func_void_double_Wrapper(std::function<void(double /* reject */)>&& func): _function(std::make_shared<std::function<void(double /* reject */)>>(std::move(func))) {}
    inline void call(double reject) const {
      _function->operator()(reject);
    }
  private:
    std::shared_ptr<std::function<void(double /* reject */)>> _function;
  };
  Func_void_double create_Func_void_double(void* _Nonnull swiftClosureWrapper);
  inline Func_void_double_Wrapper wrap_Func_void_double(Func_void_double value) {
    return Func_void_double_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const CropResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const CropResult&)>`.
   */
  using Func_void_CropResult = std::function<void(const CropResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const CropResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_CropResult_Wrapper final {
  public:
    explicit Func_void_CropResult_Wrapper(std::function<void(const CropResult& /* result */)>&& func): _function(std::make_shared<std::function<void(const CropResult& /* result */)>>(std::move(func))) {}
    inline void call(CropResult result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const CropResult& /* result */)>> _function;
  };
  Func_void_CropResult create_Func_void_CropResult(void* _Nonnull swiftClosureWrapper);
  inline Func_void_CropResult_Wrapper wrap_Func_void_CropResult(Func_void_CropResult value) {
    return Func_void_CropResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::vector<MediaPreview>
  /**
   * Specialized version of `std::vector<MediaPreview>`.
   */
  using std__vector_MediaPreview_ = std::vector<MediaPreview>;
  inline std::vector<MediaPreview> create_std__vector_MediaPreview_(size_t size) {
    std::vector<MediaPreview> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::function<void(const CameraResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const CameraResult&)>`.
   */
  using Func_void_CameraResult = std::function<void(const CameraResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const CameraResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_CameraResult_Wrapper final {
  public:
    explicit Func_void_CameraResult_Wrapper(std::function<void(const CameraResult& /* result */)>&& func): _function(std::make_shared<std::function<void(const CameraResult& /* result */)>>(std::move(func))) {}
    inline void call(CameraResult result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const CameraResult& /* result */)>> _function;
  };
  Func_void_CameraResult create_Func_void_CameraResult(void* _Nonnull swiftClosureWrapper);
  inline Func_void_CameraResult_Wrapper wrap_Func_void_CameraResult(Func_void_CameraResult value) {
    return Func_void_CameraResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::multipleimagepicker::HybridMultipleImagePickerSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::multipleimagepicker::HybridMultipleImagePickerSpec>`.
   */
  using std__shared_ptr_margelo__nitro__multipleimagepicker__HybridMultipleImagePickerSpec_ = std::shared_ptr<margelo::nitro::multipleimagepicker::HybridMultipleImagePickerSpec>;
  std::shared_ptr<margelo::nitro::multipleimagepicker::HybridMultipleImagePickerSpec> create_std__shared_ptr_margelo__nitro__multipleimagepicker__HybridMultipleImagePickerSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__multipleimagepicker__HybridMultipleImagePickerSpec_(std__shared_ptr_margelo__nitro__multipleimagepicker__HybridMultipleImagePickerSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::multipleimagepicker::HybridMultipleImagePickerSpec>
  using std__weak_ptr_margelo__nitro__multipleimagepicker__HybridMultipleImagePickerSpec_ = std::weak_ptr<margelo::nitro::multipleimagepicker::HybridMultipleImagePickerSpec>;
  inline std__weak_ptr_margelo__nitro__multipleimagepicker__HybridMultipleImagePickerSpec_ weakify_std__shared_ptr_margelo__nitro__multipleimagepicker__HybridMultipleImagePickerSpec_(const std::shared_ptr<margelo::nitro::multipleimagepicker::HybridMultipleImagePickerSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::multipleimagepicker::bridge::swift
