///
/// PickerCameraConfig.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PickerCameraConfig`, backed by a C++ struct.
 */
public typealias PickerCameraConfig = margelo.nitro.multipleimagepicker.PickerCameraConfig

public extension PickerCameraConfig {
  private typealias bridge = margelo.nitro.multipleimagepicker.bridge.swift

  /**
   * Create a new instance of `PickerCameraConfig`.
   */
  init(cameraDevice: CameraDevice?, videoMaximumDuration: Double?) {
    self.init({ () -> bridge.std__optional_CameraDevice_ in
      if let __unwrappedValue = cameraDevice {
        return bridge.create_std__optional_CameraDevice_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = videoMaximumDuration {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var cameraDevice: CameraDevice? {
    @inline(__always)
    get {
      return self.__cameraDevice.value
    }
    @inline(__always)
    set {
      self.__cameraDevice = { () -> bridge.std__optional_CameraDevice_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_CameraDevice_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var videoMaximumDuration: Double? {
    @inline(__always)
    get {
      return self.__videoMaximumDuration.value
    }
    @inline(__always)
    set {
      self.__videoMaximumDuration = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
