///
/// PickerResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PickerResult`, backed by a C++ struct.
 */
public typealias PickerResult = margelo.nitro.multipleimagepicker.PickerResult

public extension PickerResult {
  private typealias bridge = margelo.nitro.multipleimagepicker.bridge.swift

  /**
   * Create a new instance of `PickerResult`.
   */
  init(localIdentifier: String, width: Double, height: Double, mime: String, size: Double, bucketId: Double?, realPath: String?, parentFolderName: String?, creationDate: Double?, crop: Bool?, path: String, type: ResultType, duration: Double?, thumbnail: String?, fileName: String?) {
    self.init(std.string(localIdentifier), width, height, std.string(mime), size, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = bucketId {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = realPath {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = parentFolderName {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = creationDate {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = crop {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), std.string(path), type, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = duration {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = thumbnail {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = fileName {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var localIdentifier: String {
    @inline(__always)
    get {
      return String(self.__localIdentifier)
    }
    @inline(__always)
    set {
      self.__localIdentifier = std.string(newValue)
    }
  }
  
  var width: Double {
    @inline(__always)
    get {
      return self.__width
    }
    @inline(__always)
    set {
      self.__width = newValue
    }
  }
  
  var height: Double {
    @inline(__always)
    get {
      return self.__height
    }
    @inline(__always)
    set {
      self.__height = newValue
    }
  }
  
  var mime: String {
    @inline(__always)
    get {
      return String(self.__mime)
    }
    @inline(__always)
    set {
      self.__mime = std.string(newValue)
    }
  }
  
  var size: Double {
    @inline(__always)
    get {
      return self.__size
    }
    @inline(__always)
    set {
      self.__size = newValue
    }
  }
  
  var bucketId: Double? {
    @inline(__always)
    get {
      return self.__bucketId.value
    }
    @inline(__always)
    set {
      self.__bucketId = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var realPath: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__realPath.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__realPath = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var parentFolderName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__parentFolderName.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__parentFolderName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var creationDate: Double? {
    @inline(__always)
    get {
      return self.__creationDate.value
    }
    @inline(__always)
    set {
      self.__creationDate = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var crop: Bool? {
    @inline(__always)
    get {
      return self.__crop.value
    }
    @inline(__always)
    set {
      self.__crop = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var path: String {
    @inline(__always)
    get {
      return String(self.__path)
    }
    @inline(__always)
    set {
      self.__path = std.string(newValue)
    }
  }
  
  var type: ResultType {
    @inline(__always)
    get {
      return self.__type
    }
    @inline(__always)
    set {
      self.__type = newValue
    }
  }
  
  var duration: Double? {
    @inline(__always)
    get {
      return self.__duration.value
    }
    @inline(__always)
    set {
      self.__duration = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var thumbnail: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__thumbnail.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__thumbnail = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var fileName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__fileName.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__fileName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
