///
/// Text.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>

namespace margelo::nitro::multipleimagepicker {

  /**
   * A struct which can be represented as a JavaScript object (Text).
   */
  struct Text {
  public:
    std::optional<std::string> finish     SWIFT_PRIVATE;
    std::optional<std::string> original     SWIFT_PRIVATE;
    std::optional<std::string> preview     SWIFT_PRIVATE;
    std::optional<std::string> edit     SWIFT_PRIVATE;

  public:
    explicit Text(std::optional<std::string> finish, std::optional<std::string> original, std::optional<std::string> preview, std::optional<std::string> edit): finish(finish), original(original), preview(preview), edit(edit) {}
  };

} // namespace margelo::nitro::multipleimagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::multipleimagepicker;

  // C++ Text <> JS Text (object)
  template <>
  struct JSIConverter<Text> {
    static inline Text fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Text(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "finish")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "original")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "preview")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "edit"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Text& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "finish", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.finish));
      obj.setProperty(runtime, "original", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.original));
      obj.setProperty(runtime, "preview", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.preview));
      obj.setProperty(runtime, "edit", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.edit));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "finish"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "original"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "preview"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "edit"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
