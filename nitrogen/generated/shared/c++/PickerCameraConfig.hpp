///
/// PickerCameraConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `CameraDevice` to properly resolve imports.
namespace margelo::nitro::multipleimagepicker { enum class CameraDevice; }

#include <optional>
#include "CameraDevice.hpp"

namespace margelo::nitro::multipleimagepicker {

  /**
   * A struct which can be represented as a JavaScript object (PickerCameraConfig).
   */
  struct PickerCameraConfig {
  public:
    std::optional<CameraDevice> cameraDevice     SWIFT_PRIVATE;
    std::optional<double> videoMaximumDuration     SWIFT_PRIVATE;

  public:
    explicit PickerCameraConfig(std::optional<CameraDevice> cameraDevice, std::optional<double> videoMaximumDuration): cameraDevice(cameraDevice), videoMaximumDuration(videoMaximumDuration) {}
  };

} // namespace margelo::nitro::multipleimagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::multipleimagepicker;

  // C++ PickerCameraConfig <> JS PickerCameraConfig (object)
  template <>
  struct JSIConverter<PickerCameraConfig> {
    static inline PickerCameraConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return PickerCameraConfig(
        JSIConverter<std::optional<CameraDevice>>::fromJSI(runtime, obj.getProperty(runtime, "cameraDevice")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "videoMaximumDuration"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const PickerCameraConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "cameraDevice", JSIConverter<std::optional<CameraDevice>>::toJSI(runtime, arg.cameraDevice));
      obj.setProperty(runtime, "videoMaximumDuration", JSIConverter<std::optional<double>>::toJSI(runtime, arg.videoMaximumDuration));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<CameraDevice>>::canConvert(runtime, obj.getProperty(runtime, "cameraDevice"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "videoMaximumDuration"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
