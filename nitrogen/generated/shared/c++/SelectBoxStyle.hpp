///
/// SelectBoxStyle.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::multipleimagepicker {

  /**
   * An enum which can be represented as a JavaScript union (SelectBoxStyle).
   */
  enum class SelectBoxStyle {
    NUMBER      SWIFT_NAME(number) = 0,
    TICK      SWIFT_NAME(tick) = 1,
  } CLOSED_ENUM;

} // namespace margelo::nitro::multipleimagepicker

namespace margelo::nitro {

  using namespace margelo::nitro::multipleimagepicker;

  // C++ SelectBoxStyle <> JS SelectBoxStyle (union)
  template <>
  struct JSIConverter<SelectBoxStyle> {
    static inline SelectBoxStyle fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("number"): return SelectBoxStyle::NUMBER;
        case hashString("tick"): return SelectBoxStyle::TICK;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum SelectBoxStyle - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, SelectBoxStyle arg) {
      switch (arg) {
        case SelectBoxStyle::NUMBER: return JSIConverter<std::string>::toJSI(runtime, "number");
        case SelectBoxStyle::TICK: return JSIConverter<std::string>::toJSI(runtime, "tick");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert SelectBoxStyle to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("number"):
        case hashString("tick"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
